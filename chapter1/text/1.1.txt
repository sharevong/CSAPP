1.1 信息就是位+上下文

源程序：文本文件，如hello.c，由0和1组成
1字节 = 8 位，每个字节表示一个字符
字符与字节之间的映射使用ascii码标准

由ascii字符构成的文件是文本文件，其他文件为二进制文件

在不同的上下文中，同样的字节序可能表示不同含义，如整数/浮点数/指令等

1.2 程序被其他程序翻译成不同的格式

源文件到目标文件(可执行文件)的转化
gcc -o hello hello.c

四个阶段：预处理器(cpp) 编译器(ccl) 汇编器(as) 链接器(ld)，构成编译系统
    hello.c --------->  hello.i  预处理器 被修改的源程序    文本文件 
            --------->  hello.s  编译器   汇编程序          文本文件
            --------->  hello.o  汇编器   可重定位目标程序  二进制文件
            --------->  hello    链接器   可执行目标程序    二进制文件
预处理：根据以#开始的命令修改源程序，如#include <stdio.h>
编译：将高级语言翻译成汇编语言，汇编语言描述机器指令
汇编：将汇编语言翻译成机器语言，目标文件的字节编码是机器语言指令不是字符
链接：合并使用的库如c标准库，生成可执行文件，可加载到内存，由系统执行

1.3 了解编译系统如何工作是大有益处的

优化程序性能，选择好的编码方式，两种机器语言 IA32(32位) x86-64(64位)
理解链接时出现的错误
避免安全漏洞，缓冲区溢出，堆栈

1.4 处理器读并解释存储在存储器中的指令

总线：
以字为单位携带信息字节在各个部件间传递，32位字长4字节，64位字长8字节

IO设备：
输入设备 键盘 鼠标
输出设备 显示器 磁盘
每个IO设备通过控制器或适配器与IO总线相连

主存：
内存 动态随机存取存储器(DRAM)

处理器：
CPU 执行程序计数器(PC寄存器)指向的指令，再更新程序计数器
寄存器、程序计数器长度为1字长，ALU算术逻辑单元
加载操作 ---  把一个字节或一个字从主存复制到寄存器
存储操作 ---  把一个字节或一个字从寄存器复制到主存
算术操作 ---  把两个寄存器内容复制到ALU，进行算术操作，结果放入一个寄存器中
跳转操作 ---  从指令中取出一个字，复制到程序计算器中

1.5 高速缓存至关重要

处理器访问寄存器比访问主存快
处理器访问主存比访问磁盘快

L1高速缓存(数万字节)在处理器上，访问和寄存器几乎一样快
L2高速缓存(数十万到数百万)通过总线连接到处理器
L1 L2使用静态随机访问存储器(SRAM)实现

1.6 存储设备形成层次结构

寄存器 -- L1高速缓存 -- L2高速缓存 -- L3高速缓存 -- 主存 
       -- 本地磁盘(本地二级存储) -- 远程二级存储(分布式文件系统/Web服务器)
高一级是低一级的高速缓存

1.7 操作系统管理硬件

操作系统是应用程序和硬件之间的软件
防止硬件被失控的应用程序滥用
向应用程序提供简单一致的机制控制复杂的硬件

文件是对IO设备的抽象表示，虚拟存储器是对主存和磁盘的抽象表示
进程是对处理器，主存和IO设备的抽象表示

进程是操作系统对一个正在运行的程序的一种抽象
上下文，进程运行的状态信息，如PC和寄存器的值，以及主存内容
上下文切换，处理器在进程间的切换，保存当前进程的上下文，恢复新进程的上下文

进程可以由多个线程组成，每个线程在进程的上下文中，共享代码和全局数据

每个进程具有一段虚拟地址空间，虚拟地址空间由几个区组成，每个区分别存储不同内容
如程序代码和数据区，堆区，共享库区，栈区，内核区（地址从低到高）

文件是字节序列

1.8 系统之间利用网络通信

网络可视为IO设备

1.9 重要主题

并发：同时具有多个活动的系统    concurrency
并行：并发使一个系统运行得更快  parallelism

线程级并发
单处理器系统
多处理器系统  多核处理器 （多个CPU集成到一个芯片上，每个核有各自的L1 L2高速缓存
                           但共享寄存器）
              超线程 （同时多线程，一个CPU执行多个控制流，如Inter Core i7处理器
                       可以让一个核执行两个线程，当一个线程等待数据时，处理器可
                       以继续执行另一个线程）
指令级并行
处理器同时执行多条指令
单指令、多数据并行
一条指令产生多个可以并行执行的操作

虚拟机对整个计算机的抽象

1.10 小结
